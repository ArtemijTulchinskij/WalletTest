# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import auth_pb2 as auth__pb2
import common_pb2 as common__pb2
from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2

GRPC_GENERATED_VERSION = '1.68.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in auth_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class AuthServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetSentence = channel.unary_unary(
                '/auth.AuthService/GetSentence',
                request_serializer=auth__pb2.GetSentenceRequest.SerializeToString,
                response_deserializer=auth__pb2.GetSentenceReply.FromString,
                _registered_method=True)
        self.AuthByWalletSign = channel.unary_unary(
                '/auth.AuthService/AuthByWalletSign',
                request_serializer=auth__pb2.AuthByWalletSignRequest.SerializeToString,
                response_deserializer=auth__pb2.AuthReply.FromString,
                _registered_method=True)
        self.AuthByTelegram = channel.unary_unary(
                '/auth.AuthService/AuthByTelegram',
                request_serializer=auth__pb2.AuthByTelegramRequest.SerializeToString,
                response_deserializer=auth__pb2.AuthReply.FromString,
                _registered_method=True)
        self.AuthBySeed = channel.unary_unary(
                '/auth.AuthService/AuthBySeed',
                request_serializer=auth__pb2.AuthBySeedRequest.SerializeToString,
                response_deserializer=auth__pb2.AuthReply.FromString,
                _registered_method=True)
        self.NewTermsAccepted = channel.unary_unary(
                '/auth.AuthService/NewTermsAccepted',
                request_serializer=auth__pb2.NewTermsAcceptedRequest.SerializeToString,
                response_deserializer=common__pb2.EmptyReply.FromString,
                _registered_method=True)
        self.SeedPhraseAccepted = channel.unary_unary(
                '/auth.AuthService/SeedPhraseAccepted',
                request_serializer=auth__pb2.SeedPhraseAcceptedRequest.SerializeToString,
                response_deserializer=common__pb2.EmptyReply.FromString,
                _registered_method=True)
        self.AuthByCode = channel.unary_unary(
                '/auth.AuthService/AuthByCode',
                request_serializer=auth__pb2.AuthByCodeRequest.SerializeToString,
                response_deserializer=auth__pb2.AuthReply.FromString,
                _registered_method=True)
        self.RefreshAuthTokens = channel.unary_unary(
                '/auth.AuthService/RefreshAuthTokens',
                request_serializer=auth__pb2.RefreshAuthTokensRequest.SerializeToString,
                response_deserializer=auth__pb2.AuthReply.FromString,
                _registered_method=True)
        self.GetShortLifeCode = channel.unary_unary(
                '/auth.AuthService/GetShortLifeCode',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=auth__pb2.GetShortLifeCodeReply.FromString,
                _registered_method=True)


class AuthServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetSentence(self, request, context):
        """Получение фразы для подписи (по адреса кошельку)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AuthByWalletSign(self, request, context):
        """Аунентификация/Регистрация по цифровой подписи кошелька
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AuthByTelegram(self, request, context):
        """Аунентификация/Регистрация по телеграм id
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AuthBySeed(self, request, context):
        """Аунентификация/Регистрация по Seed фразе
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NewTermsAccepted(self, request, context):
        """Подтверждение согласия новых Terms
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SeedPhraseAccepted(self, request, context):
        """Подтверждение сохранения Seed
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def AuthByCode(self, request, context):
        """Аунентификация по кратковременному токену
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def RefreshAuthTokens(self, request, context):
        """Функция обновления JWT токена для установления сессии
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetShortLifeCode(self, request, context):
        """Функция получения Short Life Code токена для установления сессии
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AuthServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetSentence': grpc.unary_unary_rpc_method_handler(
                    servicer.GetSentence,
                    request_deserializer=auth__pb2.GetSentenceRequest.FromString,
                    response_serializer=auth__pb2.GetSentenceReply.SerializeToString,
            ),
            'AuthByWalletSign': grpc.unary_unary_rpc_method_handler(
                    servicer.AuthByWalletSign,
                    request_deserializer=auth__pb2.AuthByWalletSignRequest.FromString,
                    response_serializer=auth__pb2.AuthReply.SerializeToString,
            ),
            'AuthByTelegram': grpc.unary_unary_rpc_method_handler(
                    servicer.AuthByTelegram,
                    request_deserializer=auth__pb2.AuthByTelegramRequest.FromString,
                    response_serializer=auth__pb2.AuthReply.SerializeToString,
            ),
            'AuthBySeed': grpc.unary_unary_rpc_method_handler(
                    servicer.AuthBySeed,
                    request_deserializer=auth__pb2.AuthBySeedRequest.FromString,
                    response_serializer=auth__pb2.AuthReply.SerializeToString,
            ),
            'NewTermsAccepted': grpc.unary_unary_rpc_method_handler(
                    servicer.NewTermsAccepted,
                    request_deserializer=auth__pb2.NewTermsAcceptedRequest.FromString,
                    response_serializer=common__pb2.EmptyReply.SerializeToString,
            ),
            'SeedPhraseAccepted': grpc.unary_unary_rpc_method_handler(
                    servicer.SeedPhraseAccepted,
                    request_deserializer=auth__pb2.SeedPhraseAcceptedRequest.FromString,
                    response_serializer=common__pb2.EmptyReply.SerializeToString,
            ),
            'AuthByCode': grpc.unary_unary_rpc_method_handler(
                    servicer.AuthByCode,
                    request_deserializer=auth__pb2.AuthByCodeRequest.FromString,
                    response_serializer=auth__pb2.AuthReply.SerializeToString,
            ),
            'RefreshAuthTokens': grpc.unary_unary_rpc_method_handler(
                    servicer.RefreshAuthTokens,
                    request_deserializer=auth__pb2.RefreshAuthTokensRequest.FromString,
                    response_serializer=auth__pb2.AuthReply.SerializeToString,
            ),
            'GetShortLifeCode': grpc.unary_unary_rpc_method_handler(
                    servicer.GetShortLifeCode,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=auth__pb2.GetShortLifeCodeReply.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'auth.AuthService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('auth.AuthService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class AuthService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetSentence(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/auth.AuthService/GetSentence',
            auth__pb2.GetSentenceRequest.SerializeToString,
            auth__pb2.GetSentenceReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AuthByWalletSign(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/auth.AuthService/AuthByWalletSign',
            auth__pb2.AuthByWalletSignRequest.SerializeToString,
            auth__pb2.AuthReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AuthByTelegram(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/auth.AuthService/AuthByTelegram',
            auth__pb2.AuthByTelegramRequest.SerializeToString,
            auth__pb2.AuthReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AuthBySeed(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/auth.AuthService/AuthBySeed',
            auth__pb2.AuthBySeedRequest.SerializeToString,
            auth__pb2.AuthReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def NewTermsAccepted(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/auth.AuthService/NewTermsAccepted',
            auth__pb2.NewTermsAcceptedRequest.SerializeToString,
            common__pb2.EmptyReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SeedPhraseAccepted(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/auth.AuthService/SeedPhraseAccepted',
            auth__pb2.SeedPhraseAcceptedRequest.SerializeToString,
            common__pb2.EmptyReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def AuthByCode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/auth.AuthService/AuthByCode',
            auth__pb2.AuthByCodeRequest.SerializeToString,
            auth__pb2.AuthReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def RefreshAuthTokens(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/auth.AuthService/RefreshAuthTokens',
            auth__pb2.RefreshAuthTokensRequest.SerializeToString,
            auth__pb2.AuthReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def GetShortLifeCode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/auth.AuthService/GetShortLifeCode',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            auth__pb2.GetShortLifeCodeReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
